// 1. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n hai s·ªë l√†m ƒë·∫ßu v√†o v√† hi·ªÉn th·ªã t·ªïng c·ªßa ch√∫ng.

// const sum = (a, b) => {
//     return a + b
// }

// console.log(sum(2, 3))

// 7. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c chu·ªói l√†m ƒë·∫ßu v√†o v√† s·∫Øp x·∫øp danh s√°ch theo th·ª© t·ª± alphabet.
// const arr = ["Orange", "Mango", "Banana", "Apple"]
// arr.sort()
// console.log(arr)

// 8. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c s·ªë l√†m ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ s·ªë trung v·ªã c·ªßa c√°c s·ªë..(T√¨m s·ªë trung v·ªã(s·ªë trung v·ªã kh√¥ng ph·∫£i s·ªë trung b√¨nh c·ªông))
// const arrN = [1, 2, 3, 4, 5];
// let median
// const findNumber = (arr) => {
//     if (arrN.length % 2 === 1) {
//         median = arrN[Math.floor(arrN.length / 2)]
//     } else {
//         median = (arrN[arrN.length / 2 - 1] + arrN[arrN.length / 2]) / 2
//     }
//     return median
// }
// console.log(findNumber(arrN))

// 10. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c chu·ªói l√†m ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ s·ªë chu·ªói ch·ª©a ch·ªØ 'a'.
// const arr = ["Orange", "Mango", "Banana", "Apple"]
// const findArr = arr.filter(element => element.includes('a'));
// console.log(findArr)

// C·∫•p ƒê·ªô 2:
// 1. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c s·ªë l√†m ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ s·ªë l·ªõn th·ª© hai trong danh s√°ch.VD: [70, 11, 20, 4, 100] üëâ 70
// const findNumber = (arr) => {
//     const a = arr.sort((a, b) => a - b);
//     return a[a.length - 2];
// };
// console.log(findNumber([70, 11, 20, 4, 100]));

// 5 Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c s·ªë nguy√™n l√†m ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ t·ªïng con tƒÉng li√™n ti·∫øp l·ªõn nh·∫•t trong danh s√°ch.
// const arr = [2, 4, 8, 4, 5, 9, 10, 13, 6, 7, 6, 8, 10, 12];
// let max = -Infinity

// let count = 0 //2  + 4 + 8
// for (let i = 0; i < arr.length; i++) {
//     if (i === 0) {
//         count = count + arr[i]
//     } else if (arr[i - 1] < arr[i]) {
//         count = count + arr[i]
//     } else {
//         if (count > max) {
//             max = count
//         }
//         count = arr[i]
//     }
// }
// console.log(max)

// 2. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt chu·ªói l√†m ƒë·∫ßu v√†o v√† hi·ªÉn th·ªã ƒë·ªô d√†i c·ªßa chu·ªói.

// const length = (string) => {
//     return string.length;
// };

// 3. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt s·ªë l√†m ƒë·∫ßu v√†o v√† hi·ªÉn th·ªã b√¨nh ph∆∞∆°ng c·ªßa s·ªë ƒë√≥.
// const pow = (a) => {
//     return a * a;
// };

// 4. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c s·ªë l√†m ƒë·∫ßu v√†o v√† hi·ªÉn th·ªã s·ªë l·ªõn nh·∫•t trong danh s√°ch
// const max = (a) => {
//     let max1 = -Infinity;
//     for (let i = 0; i < a.length; i++) {
//         if (a[i] > max1) {
//             max1 = a[i];
//         }
//     }
//     return max1;
// };

// 5. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c chu·ªói l√†m ƒë·∫ßu v√†o v√† hi·ªÉn th·ªã chu·ªói ng·∫Øn nh·∫•t trong danh s√°ch.

// const max2 = (arr) => {
//     let max = -1,
//         s = "";
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i].length > max) {
//             max = arr[i].length;
//             s = arr[i];
//         }
//     }
//     return s;
// };

// 6. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt danh s√°ch c√°c s·ªë l√†m ƒë·∫ßu v√†o v√† s·∫Øp x·∫øp danh s√°ch theo  th·ª© t·ª± tƒÉng d·∫ßn.
// const increase = (arr) => {
//     return arr.sort((a, b) => a - b);
// };

// 9. Vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠n m·ªôt chu·ªói l√†m ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ s·ªë t·ª´ trong chu·ªói.(t√¨m s·ªë t·ª´ trong m·ªôt chu·ªói, VD: ‚ÄúHello world " => 2 )
// const s = "Hello World"
// const number = (s) => s.split(" ").length
// console.log(number(s))